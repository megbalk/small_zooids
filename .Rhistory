ano$ln.svl.mm[ano$Species == "Anolis_lemurinus_EC"],
ano$ln.svl.mm[ano$Species == "Anolis_lemurinus_ES"]))
a.cupreus <- c("Anolis_cupreus",
"", "", "", "",
mean(ano$ln.dewlap.mm2[ano$Species == "Anolis_cupreus_macrophallus"],
ano$ln.dewlap.mm2[ano$Species == "Anolis_cupreus_spilomelas"]),
mean(ano$ln.svl.mm[ano$Species == "Anolis_cupreus_macrophallus"],
ano$ln.svl.mm[ano$Species == "Anolis_cupreus_spilomelas"]))
a.sericeus <- c("Anolis_sericeus",
"", "", "", "",
mean(ano$ln.dewlap.mm2[ano$Species == "Anolis_sericeus_N"],
ano$ln.dewlap.mm2[ano$Species == "Anolis_sericeus_S"]),
mean(ano$ln.svl.mm[ano$Species == "Anolis_sericeus_N"],
ano$ln.svl.mm[ano$Species == "Anolis_sericeus_S"]))
remove <- c("Anolis_sericeus_S", "Anolis_sericeus_N",
"Anolis_cupreus_macrophallus", "Anolis_cupreus_spilomelas",
"Anolis_lemurinus_CR", "Anolis_lemurinus_EC", "Anolis_lemurinus_ES",
"Anolis_heteropholidotus") #not in phylo
ano.trim <- ano[!(ano$Species %in% remove),] #31
ano.avg <- rbind(ano.trim, a.lemurinus, a.cupreus, a.sericeus)
ano.svl <- ano.avg %>%
select(Species, ln.dewlap.mm2)
ano.dl <- ano.avg %>%
select(Species, ln.svl.mm)
plot(ano.tre,
cex = .6)
length(ano.dl[,1])
ano.dl[,1]
length(df[, 1]) #names
length(df[,1]) #names
df[,1]
str(df)
df <- as.data.frame(cbind(names, trait.values))
df$ln.trait.values <- log(as.numeric(df$trait.values))
length(df[,1]) #names
#turn the trait data into a named vector
ano.dl.v <- as.vector(as.numeric(ano.dl[,2]))
(ano.dl[,2]
)
#turn the trait data into a named vector
df.v <- as.vector(as.numeric(df[, 2])) #traits
df.v
names(df.v) <- df[, 1]
#estimate phylogenetic dependence of the trait
phylosig(rando.tree, df.v, test = TRUE, method = "lambda")
#estimate phylogenetic dependence of the trait
phylosig(rando.tree, df.v, test = TRUE, method = "lambda")
t <- 100 # total time
n <- 26 # total taxa
b <- (log(n) - log(2))/t
tree<-pbtree(b = b,
n = n,
t = t,
tip.label = LETTERS)
tree
plotTree(tree, mar = c(3.1, 0.1, 0.1, 0.1))
axis(1)
#### GENERATE TRAIT DATA ----
## simulate Brownian evolution on a tree with fastBM
x <- fastBM(tree,
sig2 = sig2,
internal=TRUE)
#### GENERATE TRAIT DATA ----
sig2 <- 0.01
## simulate Brownian evolution on a tree with fastBM
x <- fastBM(tree,
sig2 = sig2,
internal=TRUE)
x
## visualize Brownian evolution on a tree
phenogram(tree,
x,
spread.labels = TRUE,
spread.cost = c(1, 0))
x
length(x)
length(tree)
length(tree$tip.label)
length(tree$Nnode)
tree$Nnode
n <- 27 # total taxa
b <- (log(n) - log(2))/t
tree <- pbtree(b = b,
n = n,
t = t,
tip.label = LETTERS)
tree
plotTree(tree, mar = c(3.1, 0.1, 0.1, 0.1))
axis(1)
t <- 100 # total time
n <- 100 # total taxa
b <- (log(n) - log(2))/t
tree <- pbtree(b = b,
n = n,
t = t,
tip.label = LETTERS)
plotTree(tree, mar = c(3.1, 0.1, 0.1, 0.1))
axis(1)
#### GENERATE TRAIT DATA ----
# To start off, let's simulate a single instance of Brownian motion for
#100 generations of discrete time in which the variance of the diffusion process
#is Ïƒ2 = 0.01
sig2 <- 0.01
## simulate Brownian evolution on a tree with fastBM
x <- fastBM(tree,
sig2 = sig2,
internal = TRUE)
x
## visualize Brownian evolution on a tree
phenogram(tree,
x,
spread.labels = TRUE,
spread.cost = c(1, 0))
help(phenogram)
p.ano.svl.dl
###### testes and body mass ------
p.ano.svl.dl <- ggplot(data = ano) +
geom_smooth(aes(x = ln.svl.mm, y = (ln.dewlap.mm2/2)),
method = "lm", color = "black", fill = "gray74") +
geom_point(aes(x = ln.svl.mm, y = (ln.dewlap.mm2/2)),
color = "#F4A460") +
ggtitle(paste0("Scaling of Anolis SVL with Dewlap Area , N = ",
nrow(ano))) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "LN SVL (mm)") +
scale_x_continuous(name =  expression(paste("LN Dewlap Area (", mm^{2}, ")")))
p.ano.svl.dl
ggsave(p.ano.svl.dl, file = "./Results/Squamate/anolis.svl.dl.scaling.png",
width = 14, height = 10, units = "cm")
summary(lm(ln.dewlap.mm2 ~ ln.svl.mm,
data = ano)) #sig, r2 = 0.73, slope = 1.28
summary(lm((ln.dewlap.mm2/2) ~ ln.svl.mm,
data = ano)) #sig, r2 = 0.73, slope = 1.28
#### LOAD PACKAGES ----
require(stringr)
require(dplyr)
require(ggplot2)
require(reshape2)
require(lmodel2)
require(tidyverse)
setwd("~/Documents/GitHub/bryozoa/magnifica/Scripts")
setwd("~/Documents/GitHub/bryozoa/magnifica/")
output.oldest <- read.csv("./Data/output_May2023_Stegniator.csv", header = TRUE)
nrow(output.oldest) #19346
output <- read.csv("./Data/output_4Aug2023_done.csv", header = TRUE)
nrow(output) #6443
#AP_images <- read.csv("./Data/images_from_AP.csv", header = TRUE)
bryo.meta <- read.csv("./Data/image_merge_txt_usingfileName_DONE_17Apr2023.csv",
header = TRUE,
sep = ";")
nrow(bryo.meta) #1890
nrow(output) #6443
colnames(output)
output$id[1]
output$fileName <- gsub("bryozoa_lab_images/",
"",
output$id)
output$image <- gsub(".jpg",
"",
output$fileName)
zz <- output[duplicated(output$box_id),]
nrow(zz) #3
zz
output$new.id <- paste0(output$box_id, "_", output$image)
xx <- output[duplicated(output$new.id),]
nrow(xx) #0! yay!
output.oldest$fileName <- gsub("/media/voje-lab/bryozoa/imaging/Stegino_images/combined/",
"",
output.oldest$id)
output.oldest$image <- gsub(".tif",
"",
output.oldest$fileName)
zz.old <- output.oldest[duplicated(output.oldest$box_id),]
nrow(zz.old) #3
zz.old
## DO WITH OLDER DATA SET SO THAT HAVE SOMETHING TO COMPARE
output.oldest$new.id <- paste0(output.oldest$box_id, "_", output.oldest$image)
xx.old <- output.oldest[duplicated(output.oldest$new.id),]
nrow(xx.old) #0! yay!
bryo.meta.trim <- bryo.meta %>%
dplyr::select(newFileName, newImage, newSpecimenNR,
image, fileName.tif, path.tif, specimenNR.tif,
Enterer, NOTES, formation, Mag)
bryo.meta.trim$imageName <- gsub(".tif", "",
bryo.meta.trim$fileName.tif)
meta.images <- merge(output, bryo.meta.trim,
by.x = "image", by.y = "imageName",
all.x = TRUE, all.y = FALSE)
nrow(meta.images) #6443 #zooids
length(unique(meta.images$newSpecimenNR)) #732 colonies
length(unique(meta.images$fileName)) #1395 images
meta.images.old <- merge(output.oldest, bryo.meta.trim,
by.x = "image", by.y = "imageName",
all.x = TRUE, all.y = FALSE)
nrow(meta.images.old) #19346
length(unique(meta.images.old$newSpecimenNR)) #904 colonies
length(unique(meta.images.old$fileName)) #1880 iimages
nrow(meta.images)
length(unique(meta.images.old$fileName)) #1880 iimages
#### LOAD PACKAGES ----
require(stringr)
require(dplyr)
require(ggplot2)
require(reshape2)
require(lmodel2)
require(tidyverse)
col.form = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67",
"#00A9FF", "#C77CFF", "#FF61CC")
col.traits = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67",
"#00BFC4", "#00A9FF", "#C77CFF", "#FF61CC")
#### LOAD DATA ----
images.meta <- read.csv("./Data/meta.images_8Sept2023.csv",
header = TRUE,
sep = ",")
#### LOAD DATA ----
images.meta <- read.csv("./Data/meta.images_8Sept2023.csv",
header = TRUE,
sep = ",")
df.filter <- read.table("./Data/filteredImages.csv",
header = TRUE,
sep = ";")
#### EXPLORE DATA ----
nrow(df.filter) #1834
nrow(images.meta) #6443
df.filter$fileName.old <- c()
for(i in 1:nrow(df.filter)){
df.filter$fileName.old[i] <- str_split(df.filter$path.tif[i], "/")[[1]][length(str_split(df.filter$path.tif[i], "/")[[1]])]
}
images.filter <- images.meta[images.meta$fileName.tif %in% df.filter$fileName.old,]
nrow(images.filter) #6438
length(unique(images.filter$fileName.tif)) #1394
images.filter$formation <- factor(images.filter$formation,
levels = c("NKLS", "NKBS", "Tewkesbury",
"Waipuru", "Upper Kai-Iwi",
"Tainui", "SHCSBSB"))
## Zooid height (maximum height at centerline): 4 to 12
zh.x <- abs((images.filter$X4-images.filter$X12))
zh.y <-  abs((images.filter$Y4-images.filter$Y12))
zh <- sqrt(((zh.x)^2 + (zh.y)^2))
## Operculum height of left side: 4 to 20
oh.l.x <- abs((images.filter$X4-images.filter$X20))
oh.l.y <-  abs((images.filter$Y4-images.filter$Y20))
oh.l <- sqrt(((oh.l.x)^2 + (oh.l.y)^2))
## Operculum height of right side: 4 to 21
oh.r.x <- abs((images.filter$X4-images.filter$X20))
oh.r.y <-  abs((images.filter$Y4-images.filter$Y20))
oh.r <- sqrt(((oh.r.x)^2 + (oh.r.y)^2))
## Operculum mid-width (maximum width at centerline): 19 to 0
ow.m.x <- abs((images.filter$X19-images.filter$X0))
ow.m.y <-  abs((images.filter$Y19-images.filter$Y0))
ow.m <- sqrt(((ow.m.x)^2 + (ow.m.y)^2))
## Operculum base width: 21 to 20
ow.b.x <- abs((images.filter$X21-images.filter$X20))
ow.b.y <-  abs((images.filter$Y21-images.filter$Y20))
ow.b <- sqrt(((ow.b.x)^2 + (ow.b.y)^2))
## Operculum side length of right side: 21 to 18
o.side.r.x <- abs((images.filter$X21-images.filter$X18))
o.side.r.y <- abs((images.filter$Y21-images.filter$Y18))
o.side.r <- sqrt(((o.side.r.x)^2 + (o.side.r.y)^2))
## Operculum side length of left side: 20 to 17
o.side.l.x <- abs((images.filter$X20-images.filter$X17))
o.side.l.y <- abs((images.filter$Y20-images.filter$Y17))
o.side.l <- sqrt(((o.side.l.x)^2 + (o.side.l.y)^2))
## Operculum average side length:
o.side.avg <- rowMeans(cbind(o.side.r, o.side.l))
p.o.side.rl <- ggplot() +
geom_point(aes(x = o.side.l, y = o.side.r)) +
ggtitle("Operculum Side Length, N zooids = 18890, N colony = 891") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Operculum Length Right Side (pixels)") +
scale_x_continuous(name = "Operculum Length Left Side (pixels)")
ggsave(p.o.side.rl,
file = "./Results/operculum.length.png", width = 14, height = 10, units = "cm")
summary(lm(o.side.r ~ o.side.l))
## Operculum height
oh <- (.5/ow.b)*sqrt(ow.b+oh.r+oh.l)
## Median process base width: 5 to 6
mpw.b.x <- abs((images.filter$X5-images.filter$X6))
mpw.b.y <-  abs((images.filter$Y5-images.filter$Y6))
mpw.b <- sqrt(((mpw.b.x)^2 + (mpw.b.y)^2))
## Cryptocyst mid-width: 10 to 11
cw.m.x <- abs((images.filter$X10-images.filter$X11))
cw.m.y <-  abs((images.filter$Y10-images.filter$Y11))
cw.m <- sqrt(((cw.m.x)^2 + (cw.m.y)^2))
## Cryptocyst base width: 9 to 1
cw.b.x <- abs((images.filter$X9-images.filter$X1))
cw.b.y <-  abs((images.filter$Y9-images.filter$Y1))
cw.b <- sqrt(((cw.b.x)^2 + (cw.b.y)^2))
## Cryptocyst distal width: 8 to 7
cw.d.x <- abs((images.filter$X8-images.filter$X7))
cw.d.y <-  abs((images.filter$Y8-images.filter$Y7))
cw.d <- sqrt(((cw.d.x)^2 + (cw.d.y)^2))
## Cryptocyst side length of right side: 1 to 7
c.side.r.x <- abs((images.filter$X1-images.filter$X7))
c.side.r.y <- abs((images.filter$Y1-images.filter$Y7))
c.side.r <- sqrt(((c.side.r.x)^2 + (c.side.r.y)^2))
## Cryptocyst side length of left side: 9 to 8
c.side.l.x <- abs((images.filter$X9-images.filter$X8))
c.side.l.y <- abs((images.filter$Y9-images.filter$Y8))
c.side.l <- sqrt(((c.side.l.x)^2 + (c.side.l.y)^2))
## Cryptocyst average side length:
c.side.avg <- rowMeans(cbind(c.side.r, c.side.l))
p.c.side.rl <- ggplot() +
geom_point(aes(x = c.side.l, y = c.side.l)) +
ggtitle("Cryptocyst Side Length, N zooids = 18890, N colony = 891") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Cryptocyst Length Right Side (pixels)") +
scale_x_continuous(name = "Cryptocyst Length Left Side (pixels)")
summary(lm(c.side.r ~ c.side.l))
## right v left side of operculum
p.oh.rl <- ggplot() +
geom_point(aes(x = oh.l, y = oh.r)) +
ggtitle("Operculum Height, N zooids = 18890, N colony = 891") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Operculum Height Right Side (pixels)") +
scale_x_continuous(name = "Operculum Height Left Side (pixels)")
oh.model <- lmodel2(formula = oh.r ~ oh.l,
range.x = "relative",
range.y = "relative")
oh.model$regression.results #slope = 1, no asymmetry
traits.df <- data.frame(boxID = images.filter$box_id,
magnification = images.filter$Mag,
imageName = images.filter$image,
specimenNR = images.filter$specimenNR.tif,
formation = images.filter$formation,
zh = zh/.606, #z = zooid; h = height
oh = oh/.606, #o = operculum
ow.m = ow.m/.606, #w = width; m = mid
ow.b = ow.b/.606, #b = base
o.side = o.side.avg/.606,
mpw.b = mpw.b/.606, #pt = polypide tube
cw.m = cw.m/.606, #c = cryptocyst
cw.b = cw.b/.606,
cw.d = cw.d/.606, #d = distal
c.side = c.side.avg/.606,
zh.zw = zh/cw.d, #similar to LZ/WZ
oh.ow = oh/ow.m,
area = zh*cw.d) # similar to LO/WO
traits.df
##### LN TRANSFORM -----
traits.df$ln.zh <- log(traits.df$zh)
traits.df$ln.mpw.b <- log(traits.df$mpw.b)
traits.df$ln.cw.m <- log(traits.df$cw.m)
traits.df$ln.cw.d <- log(traits.df$cw.d)
traits.df$ln.ow.m <- log(traits.df$ow.m)
traits.df$ln.oh <- log(traits.df$oh)
traits.df$ln.o.side <- log(traits.df$o.side)
traits.df$ln.c.side <- log(traits.df$c.side)
traits.df$ln.area <- log(traits.df$area)
##### MINIMUM 5 ZOOIDS PER COLONY -----
samp.zoo <- traits.df %>%
group_by(colony.id) %>%
dplyr::summarize(n.zooid = length(unique(zooid.id)))
rlang::last_trace()
colname(images.filter)
colnames(images.filter)
##### MINIMUM 5 ZOOIDS PER COLONY -----
samp.zoo <- traits.df %>%
group_by(colony.id) %>%
dplyr::summarize(n.zooid = length(unique(zooid.id)))
#### CREATE IDs ----
traits.df$zooid.id <- paste0(traits.df$boxID, "_", traits.df$image)
colnames(traits.df)[colnames(traits.df) == 'specimenNR'] <- 'colony.id'
colnames(traits.df)
##### MINIMUM 5 ZOOIDS PER COLONY -----
samp.zoo <- traits.df %>%
group_by(colony.id) %>%
dplyr::summarize(n.zooid = length(unique(zooid.id)))
samp.zoo
keep <- samp.zoo$colony.id[samp.zoo$n.zooid >= 5]
length(keep) #572 colonies
df <- traits.df[traits.df$colony.id %in% keep,]
nrow(df) #5971
write.csv(traits.df,
"./Results/traits_25Sept2023.csv",
row.names = FALSE)
traits = names(df[, c("ln.zh", "ln.mpw.b", "ln.cw.m", "ln.cw.d",
"ln.ow.m", "ln.oh", "ln.c.side", "ln.o.side")])
##### ABOUT TRAITS -----
###### RANGE -------
range(df$zh)
###### DISTRIBUTION ------
traits.melt <- melt(data = df,
id.vars = c("boxID", "zooid.id","imageName", "colony.id", "formation", "magnification"),
variable.name = "measurementType",
value.name = "measurementValue")
length(unique(traits.melt$colony.id)) #731 unique colonies [previously 742]
traits.stats <- traits.melt %>%
group_by(measurementType) %>%
summarise(avg = mean(measurementValue))
traits.stats.form <- traits.melt %>%
group_by(measurementType, formation) %>%
summarise(avg = mean(measurementValue))
p.dist <- ggplot(traits.melt) +
geom_density(aes(x = log(measurementValue),
group = measurementType,
col = measurementType)) + #lots are bimodal
ggtitle("Distribution of traits, N zooids = 18890, N colony = 891") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Density") +
scale_x_continuous(name = "LN trait measurement (pixels)")
p.dist
p.ln.zh
##### BIMODALITY -----
##explore bimodality, using zooid height as an example then see if it generalizes
p.ln.zh <- ggplot(df) +
geom_density(aes(x = ln.zh)) +
ggtitle(paste0("Zooid height, N zooids = ", nrow(df), ", N colony = ", length(keep))) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Density") +
scale_x_continuous(expression(ln~Zooid~Height~(mu*m)))
p.ln.zh
ggplot(df) +
geom_histogram(aes(x = ln.zh)) +
ggtitle(paste0("Zooid height, N zooids = ", nrow(df), ", N colony = ", length(keep))) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Frequency") +
scale_x_continuous(expression(ln~Zooid~Height~(mu*m)))
p.dist
traits.melt.trim
traits.melt.trim <- traits.melt[traits.melt$measurementType == "ln.zh" |
traits.melt$measurementType == "ln.mpw.b" |
traits.melt$measurementType == "ln.cw.m" |
traits.melt$measurementType == "ln.cw.d" |
traits.melt$measurementType == "ln.ow.m" |
traits.melt$measurementType == "ln.oh" |
traits.melt$measurementType == "ln.o.side" |
traits.melt$measurementType == "ln.c.side",]
ggplot(traits.melt.trim) +
geom_density(aes(x = measurementValue,
group = measurementType,
col = measurementType)) + #lots are bimodal
ggtitle("Distribution of traits, N zooids = 18890, N colony = 891") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Density") +
scale_x_continuous(name = "LN trait measurement")
## Find cutoff for frequencies of size bins
# frequency by size bin (quarter ln bins)
df.bins <- df %>%
mutate(zh.bin = cut(ln.zh, breaks = seq(5.5, 7.5, .1))) %>%
as.data.frame()
df.bin.f <- df.bins %>%
dplyr::group_by(zh.bin) %>%
dplyr::summarise(n = n()) %>%
as.data.frame()
View(df.bin.f)
sm.traits <- df[df$ln.zh < 6.25,]
sm.colonies <- unique(sm.traits$colony.id) #41; was 95 images out of 891
bins <- c("(5.5,5.6]", "(5.6,5.7]", "(5.7,5.8]",
"(5.8,5.9]", "(5.9,6]", "(6,6.1]",
"(6.1,6.2]", "(6.2,6.3]")
df.bins$zh.bin <- as.character(df.bins$zh.bin)
df.bins$sm <- FALSE
df.bins$sm[df.bins$zh.bin %in% bins] <- TRUE
#look at proportions
prop.sm <- df.bins %>%
dplyr::group_by(colony.id) %>%
dplyr::summarise(n.zooid = length(zooid.id),
n.sm.zooid = sum(sm),
prop.sm = n.sm.zooid/n.zooid)
View(prop.sm)
View(p.dist)
#goes from 100% to 20%; perhaps make 20% the cut off
rm.col <- prop.sm$colony.id[prop.sm$prop.sm == 1]
length(rm.col) #31 colonies
reg.colonies <- df[!(df$colony.id %in% rm.col),]
#### ABOUT DATA ----
df <- reg.colonies
p.ln.zh <- ggplot(df) +
geom_density(aes(x = ln.zh)) +
ggtitle(paste0("Zooid height, N zooids = ", nrow(df), ", N colony = ", length(keep))) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Density") +
scale_x_continuous(expression(ln~Zooid~Height~(mu*m)))
p.ln.zh
##### ABOUT TRAITS -----
###### RANGE -------
range(df$zh)
#266.3675 1701.3353
range(df$zh[df$formation == "NKLS"]) #450.4467 1701.3353; smallest are 26% of biggest
range(df$zh[df$formation == "NKBS"]) #266.3675 1495.0723; smallest are 17% size of biggest
range(df$zh[df$formation == "Tewkesbury"]) #330.5689 1668.3389; smallest are 19% size of biggest
range(df$zh[df$formation == "Waipuru"]) #326.9368 1361.0060; smallest are 24% size of biggest
range(df$zh[df$formation == "Upper Kai-Iwi"]) #331.6873 1362.1250; smallest are 24% size of biggest
range(df$zh[df$formation == "Tainui"]) #592.3886 1203.1921; smallest are 50% size of biggest
range(df$zh[df$formation == "SHCSBSB"]) #418.482 1333.873; smallest are 30% size of biggest
mean(df$zh)
median(df$zh)
mean(df$zh[df$formation == "NKLS"])
setwd("~/Documents/GitHub/bryozoa/small_zooids/Scripts")
setwd("~/Documents/GitHub/bryozoa/small_zooids/")
##### MEASUREMENTS FROM ORR ET AL. ----
orr <- read.csv("./Data/Orr_etal_Results.csv",
header = TRUE)
orr[1,]
scale <- 1/orr[1,]$Length
orr.zoo <- orr[2:4,]
orr.zoo
orr.zoo$zh.scale <- orr.zoo$Length*scale
orr.zoo$zh.scale
orr.zoo$ln.zh <- log(orr.zoo$zh.scale)
orr.zoo$ln.zh
scale
